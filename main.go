package main

import (
	"context"
	"html/template"
	"log"
	"net"
	"net/http"
	"os"
	"os/signal"
	"syscall"
	"time"

	"github.com/gorilla/mux"

	// üëá –ø—Ä–æ–≤–µ—Ä—å –ø—É—Ç–∏: –æ–Ω–∏ –¥–æ–ª–∂–Ω—ã —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π —Ç–≤–æ–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
	"github.com/btynybekov/marketplace/config"      // –µ—Å–ª–∏ —É —Ç–µ–±—è internal/config ‚Äî –∑–∞–º–µ–Ω–∏ –∏–º–ø–æ—Ä—Ç
	"github.com/btynybekov/marketplace/internal/ai" // <-- –í–ê–ñ–ù–û: ai –≤ internal/ai
	"github.com/btynybekov/marketplace/internal/handlers/factory"
	"github.com/btynybekov/marketplace/internal/repository"
	"github.com/btynybekov/marketplace/storage" // –µ—Å–ª–∏ —É —Ç–µ–±—è internal/storage ‚Äî –∑–∞–º–µ–Ω–∏ –∏–º–ø–æ—Ä—Ç
)

func main() {
	// 1) –ö–æ–Ω—Ñ–∏–≥
	cfg := config.Load()

	// 2) –ë–î
	ctx := context.Background()
	db, err := storage.New(ctx, cfg.DatabaseURL)
	if err != nil {
		log.Fatalf("DB connect error: %v", err)
	}
	defer db.Close()

	// 3) –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
	repos := repository.New(db.Pool)

	// 4) AI-–∫–ª–∏–µ–Ω—Ç (openai | local)
	var aiClient ai.Client
	switch cfg.AIProvider {
	case "local":
		headers := map[string]string{}
		if cfg.LocalAIKey != "" {
			headers["X-API-Key"] = cfg.LocalAIKey
		}
		aiClient = ai.NewLocal(cfg.LocalAIURL, headers)
	default:
		aiClient = ai.NewOpenAI(cfg.OpenAIKey)
	}

	// 5) –®–∞–±–ª–æ–Ω—ã (–µ—Å–ª–∏ –Ω—É–∂–Ω—ã HTML-—Å—Ç—Ä–∞–Ω–∏—Ü—ã)
	var tmpl *template.Template
	// tmpl = factory.MustParseTemplates("web/templates/*.html")

	// 6) –§–∞–±—Ä–∏–∫–∞ —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ (—Å—é–¥–∞ –ü–ï–†–ï–î–ê–Å–ú aiClient)
	hf := factory.NewHandlersFactory(repos, tmpl, cfg, aiClient)

	// 7) –†–æ—É—Ç–µ—Ä –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤
	r := mux.NewRouter()

	// –ï—Å–ª–∏ –Ω—É–∂–µ–Ω API-–ø—Ä–µ—Ñ–∏–∫—Å –∏/–∏–ª–∏ –≤–Ω–µ—à–Ω–∏–µ middleware ‚Äî —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π:
	// api := r.PathPrefix("/api/v1").Subrouter()
	// api.Use(AuthMiddleware)
	// hf.RegisterRoutes(api)
	// –ê –µ—Å–ª–∏ –ø—Ä–µ—Ñ–∏–∫—Å –Ω–µ –Ω—É–∂–µ–Ω:
	hf.RegisterRoutes(r)

	// 8) HTTP-—Å–µ—Ä–≤–µ—Ä + graceful shutdown
	srv := &http.Server{
		Addr:              ":" + cfg.PORT,
		Handler:           r,
		ReadHeaderTimeout: 5 * time.Second,
	}

	ln, err := net.Listen("tcp", srv.Addr)
	if err != nil {
		log.Fatalf("listen error: %v", err)
	}

	go func() {
		log.Printf("Server listening on %s (env=%s)", srv.Addr, cfg.AppEnv)
		if err := srv.Serve(ln); err != nil && err != http.ErrServerClosed {
			log.Fatalf("http serve error: %v", err)
		}
	}()

	// –æ–∂–∏–¥–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è –º—è–≥–∫–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
	stop := make(chan os.Signal, 1)
	signal.Notify(stop, os.Interrupt, syscall.SIGTERM)
	<-stop

	ctxShutdown, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()
	if err := srv.Shutdown(ctxShutdown); err != nil {
		log.Printf("server shutdown error: %v", err)
	}
	log.Println("Server gracefully stopped")
}
